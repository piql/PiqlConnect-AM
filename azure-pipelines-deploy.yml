#
# Build pipeline for development versions
trigger: 
- main

# Avoid using this pipeline for PR
pr: none

# Build number: 20210112.1-DEV
name: $(Date:yyyyMMdd)$(Rev:.r)

resources:
- repo: self

variables:
  # Environment variables used by docker-compose
  DOCKER_REGISTRY: '$(dockerRegistryId).azurecr.io'

  # Build Agent VM image
  vmImageName: 'ubuntu-20.04'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:    
    - checkout: self
      submodules: true

    - publish: kube
      artifact: kube
      displayName: Publish Kubernetes manifests

- stage: DeployDev
  displayName: Deploy to Archivematica Dev environment
  dependsOn: Build

  variables:
  - name: environment
    value: 'Archivematica (Development)'
  - name: serviceEndpoint
    value: 'Archivematica (Development)'
  - name: namespace
    value: 'am-dev'
  - name: am-hostname
    value: 'am-dev'
  - name: amss-hostname
    value: 'amss-dev'

  - group: 'archivematica.env (Development)'

  jobs:
  - deployment: Deploy
    displayName: Deploy Kubernetes resources
    pool:
      vmImage: $(vmImageName)
    environment:
      name: ${{ variables.environment }}
      resourceType: Kubernetes
    strategy:
      runOnce:
        deploy:
          steps:
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in **/*.yml'
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/kube/deployments'
              targetFiles: '**/*.yml'
              escapeType: none  

          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in *.env files'
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/kube/deployments'
              targetFiles: '**/*.env'
              escapeType: none

          - task: Kubernetes@1
            displayName: Deploy certificates
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              command: apply
              arguments: -f $(Pipeline.Workspace)/kube/deployments/certificates.yml

          - task: Kubernetes@1
            displayName: 'Deploy - Secret - storage-secret-ingest'
            inputs:
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              namespace: default
              secretType: generic
              secretArguments: '--from-env-file=storage-secret-ingest.env'
              secretName: '${{ variables.namespace }}-storage-secret-ingest'
              workingDirectory: '$(Pipeline.Workspace)/kube/deployments'   

          - task: Kubernetes@1
            displayName: 'Deploy - Secret - storage-secret-am'
            inputs:
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              namespace: default
              secretType: generic
              secretArguments: '--from-env-file=storage-secret-am.env'
              secretName: '${{ variables.namespace }}-storage-secret-am'
              workingDirectory: '$(Pipeline.Workspace)/kube/deployments'  

          - task: Kubernetes@1
            displayName: 'Deploy - Secret - archivematica-settings'
            inputs:
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              namespace: $(namespace)
              secretType: generic
              secretArguments: '--from-env-file=archivematica.env'
              secretName: 'archivematica-settings'
              workingDirectory: '$(Pipeline.Workspace)/kube/deployments'  

          - task: Kubernetes@1
            displayName: 'Deploy - Persistent Volume Claims'
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              command: apply
              arguments: -f $(Pipeline.Workspace)/kube/deployments/volume-claims.yml
   
          - task: KubernetesManifest@0
            displayName: Deploy services            
            inputs:
              action: deploy
              kubernetesServiceConnection: ${{ variables.serviceEndpoint }}
              namespace: $(namespace)
              manifests: '$(Pipeline.Workspace)/kube/deployments/deployment-*.yml'

- stage: DeployTest
  displayName: Deploy to Archivematica Test environment
  dependsOn: DeployDev

  variables:
  - name: environment
    value: 'Archivematica (Test)'
  - name: serviceEndpoint
    value: 'Archivematica (Test)'
  - name: namespace
    value: 'am-test'
  - name: am-hostname
    value: 'am-test'
  - name: amss-hostname
    value: 'amss-test'

  - group: 'archivematica.env (Test)'

  jobs:
  - deployment: Deploy
    displayName: Deploy Kubernetes resources
    pool:
      vmImage: $(vmImageName)
    environment:
      name: ${{ variables.environment }}
      resourceType: Kubernetes
    strategy:
      runOnce:
        deploy:
          steps:
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in **/*.yml'
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/kube/deployments'
              targetFiles: '**/*.yml'
              escapeType: none  

          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in *.env files'
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/kube/deployments'
              targetFiles: '**/*.env'
              escapeType: none

          - task: Kubernetes@1
            displayName: Deploy certificates
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              command: apply
              arguments: -f $(Pipeline.Workspace)/kube/deployments/certificates.yml

          - task: Kubernetes@1
            displayName: 'Deploy - Secret - am-test-storage-secret'
            inputs:
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              namespace: default
              secretType: generic
              secretArguments: '--from-env-file=storage-secret.env'
              secretName: '${{ variables.namespace }}-storage-secret'
              workingDirectory: '$(Pipeline.Workspace)/kube/deployments'   

          - task: Kubernetes@1
            displayName: 'Deploy - Secret - archivematica-settings'
            inputs:
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              namespace: $(namespace)
              secretType: generic
              secretArguments: '--from-env-file=archivematica.env'
              secretName: 'archivematica-settings'
              workingDirectory: '$(Pipeline.Workspace)/kube/deployments'  

          - task: Kubernetes@1
            displayName: 'Deploy - Persistent Volume Claims'
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: ${{ variables.serviceEndpoint }}
              command: apply
              arguments: -f $(Pipeline.Workspace)/kube/deployments/volume-claims.yml
   
          - task: KubernetesManifest@0
            displayName: Deploy services            
            inputs:
              action: deploy
              kubernetesServiceConnection: ${{ variables.serviceEndpoint }}
              namespace: $(namespace)
              manifests: '$(Pipeline.Workspace)/kube/deployments/deployment-*.yml'