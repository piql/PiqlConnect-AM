apiVersion: apps/v1
kind: Deployment
metadata:
  name: archivematica-storage-service
  namespace: '#{namespace}#'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: archivematica-storage-service
      app.kubernetes.io/instance: '#{namespace}#'
      app.kubernetes.io/part-of: piqlconnect
      app.kubernetes.io/managed-by: azure-devops    
  strategy:
    type: Recreate
  template:
    metadata:      
      labels:
        app.kubernetes.io/name: archivematica-storage-service
        app.kubernetes.io/instance: '#{namespace}#'
        app.kubernetes.io/version: "#{VERSION}#"    
        app.kubernetes.io/part-of: piqlconnect
        app.kubernetes.io/managed-by: azure-devops
    spec:
      containers:
        - image: '#{DOCKER_REGISTRY}#/archivematica-storage-service:#{VERSION}#'
          name: archivematica-storage-service
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: storage_service.settings.local
            - name: FORWARDED_ALLOW_IPS
              value: '*'        
            - name: SS_GNUPG_HOME_PATH
              value: /var/archivematica/storage_service/.gnupg
            - name: SS_GUNICORN_ACCESSLOG
              value: /dev/null
            - name: SS_GUNICORN_RELOAD
              value: "true"
            - name: SS_GUNICORN_RELOAD_ENGINE
              value: auto
          ports:
          - containerPort: 8000             
          envFrom:
            - secretRef:
                name: archivematica-settings
          resources: 
            requests:
              memory: "256Mi"
              cpu: "1m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          volumeMounts:
            - mountPath: /var/archivematica/sharedDirectory
              name: archivematica-pipeline-data
            - mountPath: /var/archivematica/storage_service
              name: archivematica-storage-service-staging-data
            - mountPath: /home
              name: archivematica-storage-service-location-data

      restartPolicy: Always
      volumes:       
        - name: archivematica-pipeline-data
          persistentVolumeClaim:
            claimName: archivematica-pipeline-data
        - name: archivematica-storage-service-staging-data
          persistentVolumeClaim:
            claimName: archivematica-storage-service-staging-data
        - name: archivematica-storage-service-location-data
          persistentVolumeClaim:
            claimName: archivematica-storage-service-location-data
---
apiVersion: v1
kind: Service
metadata:
  app.kubernetes.io/name: archivematica-storage-service
spec:  
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
  selector:
    app.kubernetes.io/name: archivematica-storage-service
---
apiVersion: extensions/v1
kind: Ingress
metadata:
  name: archivematica-dashboard
  labels:
    app.kubernetes.io/name: archivematica-dashboard
    app.kubernetes.io/instance: '#{namespace}#'
    app.kubernetes.io/version: "#{VERSION}#"    
    app.kubernetes.io/part-of: piqlconnect
    app.kubernetes.io/managed-by: azure-devops
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:  
  tls:
  - hosts:
    - 'amss-dev.piqlconnect.com'
    secretName: 'amss-dev-piqlconnect-com-cert'
  rules:
  - host: 'amss-dev.piqlconnect.com'
    http:
      paths:           
      - path: /
        pathType: Prefix
        backend:
          service:
            name: archivematica-dashboard
            port:
              number: 80