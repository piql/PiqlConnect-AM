apiVersion: apps/v1
kind: Deployment
metadata:
  name: archivematica-storage-service
  namespace: '#{namespace}#'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: archivematica-storage-service
      app.kubernetes.io/instance: '#{namespace}#'
      app.kubernetes.io/part-of: piqlconnect
      app.kubernetes.io/managed-by: azure-devops    
  strategy:
    type: Recreate
  template:
    metadata:      
      labels:
        app.kubernetes.io/name: archivematica-storage-service
        app.kubernetes.io/instance: '#{namespace}#'
        app.kubernetes.io/version: "#{VERSION}#"    
        app.kubernetes.io/part-of: piqlconnect
        app.kubernetes.io/managed-by: azure-devops
    spec:     
      containers:
        - image: '#{DOCKER_REGISTRY}#/archivematica-storage-service:#{VERSION}#'
          name: archivematica-storage-service
          securityContext:
            runAsUser: 333
            runAsGroup: 333
            fsGroup: 333
            fsGroupChangePolicy: "OnRootMismatch"
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: storage_service.settings.local
            - name: FORWARDED_ALLOW_IPS
              value: '*'        
            - name: SS_GNUPG_HOME_PATH
              value: /var/archivematica/storage_service/.gnupg
            - name: SS_GUNICORN_ACCESSLOG
              value: /dev/null
            - name: SS_GUNICORN_RELOAD
              value: "true"
            - name: SS_GUNICORN_RELOAD_ENGINE
              value: auto
          ports:
          - containerPort: 8000             
          envFrom:
            - secretRef:
                name: archivematica-settings
          resources: 
            requests:
              memory: "256Mi"
              cpu: "1m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          volumeMounts:
            - mountPath: /var/archivematica/sharedDirectory
              name: archivematica-pipeline-data
            - mountPath: /var/archivematica/storage_service
              name: archivematica-staging-data
            - mountPath: /home
              name: archivematica-location-data

      initContainers:
        - image: '#{DOCKER_REGISTRY}#/archivematica-storage-service:#{VERSION}#'
          name: archivematica-storage-service-migrations
          command: ["/src/storage_service/manage.py"]
          args: ["migrate", "--noinput"]
          envFrom:
            - secretRef:
                name: archivematica-settings
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: storage_service.settings.local
            - name: FORWARDED_ALLOW_IPS
              value: '*'        
            - name: SS_GNUPG_HOME_PATH
              value: /var/archivematica/storage_service/.gnupg
            - name: SS_GUNICORN_ACCESSLOG
              value: /dev/null
            - name: SS_GUNICORN_RELOAD
              value: "true"
            - name: SS_GUNICORN_RELOAD_ENGINE
              value: auto

        - image: '#{DOCKER_REGISTRY}#/archivematica-storage-service:#{VERSION}#'
          name: archivematica-storage-service-create-user
          command: ["/src/storage_service/manage.py"]
          args: ['create_user', '--username=#{AM_SS_USERNAME}#', '--password=#{AM_SS_PASSWORD}#', '--email=#{AM_SS_EMAIL}#', '--api-key=#{AM_SS_API_KEY}#', '--superuser']
          envFrom:
            - secretRef:
                name: archivematica-settings
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: storage_service.settings.local
            - name: FORWARDED_ALLOW_IPS
              value: '*'        
            - name: SS_GNUPG_HOME_PATH
              value: /var/archivematica/storage_service/.gnupg
            - name: SS_GUNICORN_ACCESSLOG
              value: /dev/null
            - name: SS_GUNICORN_RELOAD
              value: "true"
            - name: SS_GUNICORN_RELOAD_ENGINE
              value: auto

      restartPolicy: Always
      volumes:       
        - name: archivematica-pipeline-data
          persistentVolumeClaim:
            claimName: '#{namespace}#-pipeline-data-claim'
        - name: archivematica-staging-data
          persistentVolumeClaim:
            claimName: '#{namespace}#-staging-data-claim'
        - name: archivematica-location-data
          persistentVolumeClaim:
            claimName: '#{namespace}#-location-data-claim'
---
apiVersion: v1
kind: Service
metadata:
  namespace: '#{namespace}#'
  name: archivematica-storage-service
  labels:
    app.kubernetes.io/name: archivematica-storage-service
    app.kubernetes.io/instance: '#{namespace}#'
    app.kubernetes.io/version: "#{VERSION}#"    
    app.kubernetes.io/part-of: piqlconnect
    app.kubernetes.io/managed-by: azure-devops
spec:  
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app.kubernetes.io/name: archivematica-storage-service
    app.kubernetes.io/instance: '#{namespace}#'
    app.kubernetes.io/version: "#{VERSION}#"    
    app.kubernetes.io/part-of: piqlconnect
    app.kubernetes.io/managed-by: azure-devops
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: '#{namespace}#'
  name: archivematica-storage-service-ingress 
  annotations:
    kubernetes.io/ingress.class: nginx    
    nginx.org/server-snippets: "gzip on;"
    cert-manager.io/cluster-issuer: letsencrypt-prod    
    nginx.ingress.kubernetes.io/ssl-redirect: "true"    
spec:  
  tls:
  - hosts:
    - '#{amss-hostname}#.piqlconnect.com'
    secretName: '#{amss-hostname}#-piqlconnect-com-cert'
  rules:
  - host: '#{amss-hostname}#.piqlconnect.com'
    http:
      paths:           
      - path: /
        pathType: Prefix
        backend:
          service:
            name: archivematica-storage-service
            port:
              number: 8000